apply plugin: 'maven'
apply plugin: 'signing'

ext {
    PUBLISH_DEVELOPER = "Relex"
    PUBLISH_NAME = "CircleIndicator"
    PUBLISH_DESCRIPTION = "A lightweight indicator"
    PUBLISH_URL = "https://github.com/ongakuer/CircleIndicator"
    PUBLISH_GIT_URL = "https://github.com/ongakuer/CircleIndicator.git"
    PUBLISH_GROUP_ID = "me.relex"
    PUBLISH_ARTIFACT_ID = "circleindicator"
    PUBLISH_VERSION = android.defaultConfig.versionName
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            if (variant.hasProperty('javaCompileProvider')) {
                owner.classpath += variant.javaCompileProvider.get().classpath
            } else {
                owner.classpath += variant.javaCompiler.classpath
            }
        }
    }
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options {
        encoding 'utf-8'
        charSet 'utf-8'
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html', '**/*.kt'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    //    classifier = 'javadoc'
    archiveClassifier.convention('javadoc')
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    //    classifier = 'sources'
    archiveClassifier.convention('sources')
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

signing {
    //    required { project.has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            try {
                repository(url: "$sonatypeRepo") {
                    authentication(userName: "$sonatypeUsername", password: "$sonatypePassword")
                }
            } catch (ignored) {
                throw new InvalidUserDataException("Missing authentication ")
            }

            pom.groupId = project.PUBLISH_GROUP_ID
            pom.artifactId = project.PUBLISH_ARTIFACT_ID
            pom.version = project.PUBLISH_VERSION
            pom.project {
                name project.PUBLISH_NAME
                description project.PUBLISH_DESCRIPTION
                url project.PUBLISH_URL
                scm {
                    connection "scm:git:${project.PUBLISH_GIT_URL}"
                    url project.PUBLISH_URL
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name project.PUBLISH_DEVELOPER
                    }
                }
            }
        }
    }
}